# Production Docker Compose for Matrix Google Play Bridge
version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: googleplay-bridge-db
    environment:
      POSTGRES_DB: googleplay_bridge
      POSTGRES_USER: bridge_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    restart: unless-stopped
    networks:
      - bridge-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bridge_user -d googleplay_bridge"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for caching (optional, for future enhancements)
  redis:
    image: redis:7-alpine
    container_name: googleplay-bridge-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - bridge-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Matrix Google Play Bridge Application
  bridge:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: googleplay-bridge-app
    environment:
      NODE_ENV: production
      CONFIG_PATH: /app/config/production.yaml
      # Database connection
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: googleplay_bridge
      DB_USER: bridge_user
      DB_PASSWORD: ${DB_PASSWORD:-secure_password}
      # Google Play credentials (use secrets in production)
      GOOGLE_APPLICATION_CREDENTIALS: /app/secrets/service-account-key.json
    volumes:
      - ./config/production.yaml:/app/config/production.yaml:ro
      - ./secrets:/app/secrets:ro
      - bridge_logs:/var/log/googleplay-bridge
    ports:
      - "8080:8080"   # Bridge API
      - "9090:9090"   # Monitoring/Health checks
    depends_on:
      database:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - bridge-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: googleplay-bridge-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9091:9090"
    depends_on:
      - bridge
    restart: unless-stopped
    networks:
      - bridge-network

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: googleplay-bridge-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - bridge-network

  # Log aggregation with Fluentd (optional)
  fluentd:
    image: fluent/fluentd:v1.16-1
    container_name: googleplay-bridge-fluentd
    volumes:
      - ./monitoring/fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - bridge_logs:/var/log/googleplay-bridge:ro
    depends_on:
      - bridge
    restart: unless-stopped
    networks:
      - bridge-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: googleplay-bridge-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - bridge
      - grafana
    restart: unless-stopped
    networks:
      - bridge-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  bridge_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  bridge-network:
    driver: bridge